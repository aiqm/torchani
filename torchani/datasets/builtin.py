# This file is automatically generated by tools/builtin-datasets-codegen.py,
# which uses the jinja template engine, *DO NOT MODIFY THIS FILE* unless you
# know what you are doing.
import typing as tp
import json
from enum import Enum
from pathlib import Path

from torchani.datasets.utils import _builder
from torchani.datasets.anidataset import ANIDataset

_DATASETS_JSON_PATH = Path(__file__).parent / "builtin_datasets.json"

with open(_DATASETS_JSON_PATH, mode="rt", encoding="utf-8") as f:
    _DATASETS_SPEC = json.load(f)

# Convert csv file with format "file_name, MD5-hash" into a dictionary
_MD5S: tp.Dict[str, str] = dict()
with open(Path(__file__).resolve().parent / "md5s.csv") as f:
    lines = f.readlines()
    for line in lines[1:]:
        file_, md5 = line.split(",")
        _MD5S[file_.strip()] = md5.strip()


def TestData(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["TestData"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="TestData",
        suffix=".h5"
    )


def TestDataIons(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["TestDataIons"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="TestDataIons",
        suffix=".h5"
    )


def TestDataForcesDipoles(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["TestDataForcesDipoles"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="TestDataForcesDipoles",
        suffix=".h5"
    )


def IonsVeryHeavy(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["IonsVeryHeavy"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="IonsVeryHeavy",
        suffix=".h5"
    )


def IonsHeavy(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["IonsHeavy"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="IonsHeavy",
        suffix=".h5"
    )


def IonsLight(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["IonsLight"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="IonsLight",
        suffix=".h5"
    )


def ANI1q(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["ANI1q"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="ANI1q",
        suffix=".h5"
    )


def ANI2qHeavy(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["ANI2qHeavy"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="ANI2qHeavy",
        suffix=".h5"
    )


def ANI1ccx(
    lot: str = "ccsd(t)star-cbs",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["ANI1ccx"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="ANI1ccx",
        suffix=".h5"
    )


def AminoacidDimers(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["AminoacidDimers"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="AminoacidDimers",
        suffix=".h5"
    )


def ANI1x(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["ANI1x"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="ANI1x",
        suffix=".h5"
    )


def ANI2x(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["ANI2x"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="ANI2x",
        suffix=".h5"
    )


def COMP6v1(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["COMP6v1"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="COMP6v1",
        suffix=".h5"
    )


def COMP6v2(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["COMP6v2"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="COMP6v2",
        suffix=".h5"
    )


def QM9C7O2H10(
    lot: str = "g4mp2-631g_2df_p",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["QM9C7O2H10"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="QM9C7O2H10",
        suffix=".h5"
    )


def QM9Clean(
    lot: str = "b3lyp-631g_2df_p",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["QM9Clean"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="QM9Clean",
        suffix=".h5"
    )


def QM9Dirty(
    lot: str = "b3lyp-631g_2df_p",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["QM9Dirty"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="QM9Dirty",
        suffix=".h5"
    )


def Iso17EquilibriumSet1(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Iso17EquilibriumSet1"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Iso17EquilibriumSet1",
        suffix=".h5"
    )


def Iso17EquilibriumSet2(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Iso17EquilibriumSet2"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Iso17EquilibriumSet2",
        suffix=".h5"
    )


def Iso17TestSet1(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Iso17TestSet1"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Iso17TestSet1",
        suffix=".h5"
    )


def Iso17TestSet2(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Iso17TestSet2"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Iso17TestSet2",
        suffix=".h5"
    )


def Iso17TrainSet1(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Iso17TrainSet1"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Iso17TrainSet1",
        suffix=".h5"
    )


def SN2(
    lot: str = "dsd_blyp_d3bj-def2tzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SN2"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SN2",
        suffix=".h5"
    )


def ANICCScan(
    lot: str = "uwb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["ANICCScan"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="ANICCScan",
        suffix=".h5"
    )


def DielsAlder(
    lot: str = "uwb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["DielsAlder"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="DielsAlder",
        suffix=".h5"
    )


def ANI1e(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["ANI1e"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="ANI1e",
        suffix=".h5"
    )


def SPICEDes370K(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SPICEDes370K"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SPICEDes370K",
        suffix=".h5"
    )


def SPICEDesMonomers(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SPICEDesMonomers"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SPICEDesMonomers",
        suffix=".h5"
    )


def SPICEDipeptides(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SPICEDipeptides"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SPICEDipeptides",
        suffix=".h5"
    )


def SPICEIonPairs(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SPICEIonPairs"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SPICEIonPairs",
        suffix=".h5"
    )


def SPICEPubChem2xCompatible(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SPICEPubChem2xCompatible"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SPICEPubChem2xCompatible",
        suffix=".h5"
    )


def SPICEPubChem(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SPICEPubChem"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SPICEPubChem",
        suffix=".h5"
    )


def SPICESolvatedAminoacids(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SPICESolvatedAminoacids"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SPICESolvatedAminoacids",
        suffix=".h5"
    )


def SolvatedProteinFragments(
    lot: str = "revpbe_d3bj-def2tzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["SolvatedProteinFragments"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="SolvatedProteinFragments",
        suffix=".h5"
    )


def Train3BPAMixedT(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Train3BPAMixedT"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Train3BPAMixedT",
        suffix=".h5"
    )


def Train3BPA300K(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Train3BPA300K"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Train3BPA300K",
        suffix=".h5"
    )


def Test3BPA300K(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Test3BPA300K"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Test3BPA300K",
        suffix=".h5"
    )


def Test3BPA600K(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Test3BPA600K"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Test3BPA600K",
        suffix=".h5"
    )


def Test3BPA1200K(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Test3BPA1200K"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Test3BPA1200K",
        suffix=".h5"
    )


def Test3BPADihedral180(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Test3BPADihedral180"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Test3BPADihedral180",
        suffix=".h5"
    )


def Test3BPADihedral150(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Test3BPADihedral150"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Test3BPADihedral150",
        suffix=".h5"
    )


def Test3BPADihedral120(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["Test3BPADihedral120"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="Test3BPADihedral120",
        suffix=".h5"
    )


def ANIExCorr(
    lot: str = "pbe-dzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    lot = lot.lower()
    lots = _DATASETS_SPEC["ANIExCorr"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="ANIExCorr",
        suffix=".h5"
    )


class DatasetId(Enum):
    TESTDATA = "TestData"
    TESTDATAIONS = "TestDataIons"
    TESTDATAFORCESDIPOLES = "TestDataForcesDipoles"
    IONSVERYHEAVY = "IonsVeryHeavy"
    IONSHEAVY = "IonsHeavy"
    IONSLIGHT = "IonsLight"
    ANI1Q = "ANI1q"
    ANI2QHEAVY = "ANI2qHeavy"
    ANI1CCX = "ANI1ccx"
    AMINOACIDDIMERS = "AminoacidDimers"
    ANI1X = "ANI1x"
    ANI2X = "ANI2x"
    COMP6V1 = "COMP6v1"
    COMP6V2 = "COMP6v2"
    QM9C7O2H10 = "QM9C7O2H10"
    QM9CLEAN = "QM9Clean"
    QM9DIRTY = "QM9Dirty"
    ISO17EQUILIBRIUMSET1 = "Iso17EquilibriumSet1"
    ISO17EQUILIBRIUMSET2 = "Iso17EquilibriumSet2"
    ISO17TESTSET1 = "Iso17TestSet1"
    ISO17TESTSET2 = "Iso17TestSet2"
    ISO17TRAINSET1 = "Iso17TrainSet1"
    SN2 = "SN2"
    ANICCSCAN = "ANICCScan"
    DIELSALDER = "DielsAlder"
    ANI1E = "ANI1e"
    SPICEDES370K = "SPICEDes370K"
    SPICEDESMONOMERS = "SPICEDesMonomers"
    SPICEDIPEPTIDES = "SPICEDipeptides"
    SPICEIONPAIRS = "SPICEIonPairs"
    SPICEPUBCHEM2XCOMPATIBLE = "SPICEPubChem2xCompatible"
    SPICEPUBCHEM = "SPICEPubChem"
    SPICESOLVATEDAMINOACIDS = "SPICESolvatedAminoacids"
    SOLVATEDPROTEINFRAGMENTS = "SolvatedProteinFragments"
    TRAIN3BPAMIXEDT = "Train3BPAMixedT"
    TRAIN3BPA300K = "Train3BPA300K"
    TEST3BPA300K = "Test3BPA300K"
    TEST3BPA600K = "Test3BPA600K"
    TEST3BPA1200K = "Test3BPA1200K"
    TEST3BPADIHEDRAL180 = "Test3BPADihedral180"
    TEST3BPADIHEDRAL150 = "Test3BPADihedral150"
    TEST3BPADIHEDRAL120 = "Test3BPADihedral120"
    ANIEXCORR = "ANIExCorr"


class LotId(Enum):
    B3LYP_631G_2DF_P = "b3lyp-631g_2df_p"
    B973C_DEF2MTZVP = "b973c-def2mtzvp"
    CCSD_PTP_STAR_CBS = "ccsd(t)star-cbs"
    DSD_BLYP_D3BJ_DEF2TZVP = "dsd_blyp_d3bj-def2tzvp"
    G4MP2_631G_2DF_P = "g4mp2-631g_2df_p"
    PBE_DZVP = "pbe-dzvp"
    PBE_TS_FHI_AIMS_NUMERICAL = "pbe_ts-fhi_aims_numerical"
    REVPBE_D3BJ_DEF2TZVP = "revpbe_d3bj-def2tzvp"
    UWB97X_631GD = "uwb97x-631gd"
    WB97M_D3BJ_DEF2TZVPPD = "wb97m_d3bj-def2tzvppd"
    WB97MD3BJ_DEF2TZVPP = "wb97md3bj-def2tzvpp"
    WB97MV_DEF2TZVPP = "wb97mv-def2tzvpp"
    WB97X_631GD = "wb97x-631gd"
    WB97X_DEF2TZVPP = "wb97x-def2tzvpp"
