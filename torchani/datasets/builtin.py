# This file is automatically generated by tools/builtin-datasets-codegen.py,
# which uses the jinja template engine, *DO NOT MODIFY THIS FILE* unless you
# know what you are doing.
r"""TorchANI Built-in Datasets

Datasets provided by the TorchANI library, in a format ready to batch and train
on. All datasets importable from this module are also directly importable from
`torchani.datasets`. For all datasets, the corresponding docstrings provide
references and associated DOI when possible that point to the original
publications. Please cite the original publications if you use any of these
datasets.

Note that the conformations present in datasets with different LoT *may be
different*. In many cases the number of conformations is similar, and many of
the conformations match, but due to filters applied to the data, and to
different convergence characteristics of the different LoT used, some
calculations may not properly converge, or may be too costly for some LoT and
thus are not included.
"""
import typing as tp
from enum import Enum

from torchani.paths import datasets_dir
from torchani.datasets._utils import _fetch_and_create_builtin_dataset
from torchani.datasets.anidataset import ANIDataset


def TestData(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    GDB subset, only for debugging and code test purposes
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="TestData",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def TestDataIons(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Only for debugging and test purposes, includes forces, dipoles and charges
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="TestDataIons",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def TestDataForcesDipoles(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Only for debugging and code testing purposes, includes forces and dipoles
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="TestDataForcesDipoles",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def IonsVeryHeavy(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Dataset that includes ions, with H,C,N,O,F,S,Cl elements and at least one of
    Si,As,Br,Se,P,B,I (disjoint from LightIons and IonsHeavy) This dataset is not meant
    to be trained to on its own
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="IonsVeryHeavy",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def IonsHeavy(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: This dataset may have incorrect energies and/or forces. Dataset that
    includes ions, with H,C,N,O elements and at least one of F,S,Cl (disjoint from
    IonsLight) This dataset is not meant to be trained to on its own
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="IonsHeavy",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def IonsLight(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: This dataset may have incorrect energies and/or forces. Dataset that
    includes ions, with H,C,N,O elements only. Not meant to be trained to on its own
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="IonsLight",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def ANI1q(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Very limited subset of ANI-1x for which 'atomic CM5 charges' are available. This
    dataset is not meant to be trained to on its own. Originally published in *TODO*.
    DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="ANI1q",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def ANI2qHeavy(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Subset of ANI-2x 'heavy' for which 'atomic CM5 charges' are available. This dataset
    is not meant to be trained to on its own. Originally published in *TODO*. DOI:
    'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="ANI2qHeavy",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def ANI1ccx(
    lot: str = "ccsd(t)star-cbs",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    This dataset also has Hartree Fock (HF) energies, RI-MP2 energies and forces and
    DPLNO-CCSD(T) energies for different basis sets and PNO settings. This dataset was
    originally used for transfer learning, not direct training. Originally published in
    *TODO*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="ANI1ccx",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def AminoacidDimers(
    lot: str = "b973c-def2mtzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Small set of aminoacid dimers. This dataset is not meant to be trained to on its own
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="AminoacidDimers",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def ANI1x(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Originally published in *TODO*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="ANI1x",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def ANI2x(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    In all cases the 'v2' and '2x' datasets are supersets of the 'v1' and '1x' datasets,
    so everything that is in the v1/1x datasets is also in the v2/2x datasets, which
    contain extra structures, except for some wb97X/def2-TZVPP data points for which
    there are 'v1' values but not 'v2' values. Originally published in *TODO*. DOI:
    'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="ANI2x",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def COMP6v1(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Test set, not meant for direct training. In all cases the 'v2' and '2x' datasets are
    supersets of the 'v1' and '1x' datasets, so everything that is in the v1/1x datasets
    is also in the v2/2x datasets, which contain extra structures, except for some
    wb97X/def2-TZVPP data points for which there are 'v1' values but not 'v2' values.
    Note that the ANI-BenchMD, S66x8 and the ``13`` molecules (with 13 heavy atoms) of
    GDB-10to13 were recalculated using ORCA 5.0 instead of 4.2, with default integration
    grids. The numerical difference is not significant for the purposes of training.
    Originally published in *TODO*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="COMP6v1",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def COMP6v2(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Test set, not meant for direct training. Note that the ANI-BenchMD, S66x8 and the
    ``13`` molecules (with 13 heavy atoms) of GDB-10to13 were recalculated using ORCA
    5.0 instead of 4.2, with default integration grids. The numerical difference is not
    significant for the purposes of training. Originally published in *TODO*. DOI:
    'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="COMP6v2",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def QM9C7O2H10(
    lot: str = "g4mp2-631g_2df_p",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Subset of QM9 with thermal properties recalculated at the higher G4MP2 level of
    theory. Note that the rest of the properties in this dataset are calculated at the
    B3LYP/631G_2df_p level of theory. Properties correspond only to conformations of the
    stoichiometry C7O2H10. Originally published in *TODO*. DOI:
    'https://doi.org/10.1038/sdata.2014.22'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="QM9C7O2H10",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def QM9(
    lot: str = "b3lyp-631g_2df_p",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Clean version of the QM9 dataset, without structures that failed geometry
    consistency checks. It has no forces, but contains various other physical
    quantities. Vibrational freqs, are always 3 A - 5. Linear molecules the
    ``is_linear`` flag set. For non linear molecules the last freq is 0.0 and should be
    discarded. Molecules with a second set of freqs have the
    ``has_alternative_frequencies`` flag set. Molecules that don't have this second set
    have zeros for this field. Originally published in *TODO*. DOI:
    'https://doi.org/10.1038/sdata.2014.22'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="QM9",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Iso17EquilibriumSet1(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    MD trajectories using FHI-aims, with a resolution of 1 frame / fs. Dataset has total
    energies and atomic forces. This is a group of datasets consisting on 5 datasets.
    EquilibriumSet1, TrainSet1 and TestSet2 contain the same molecules, all with C7O2H10
    stoichiometry. TestSet2 and EquilibriumSet2 contain different molecules with the
    same stoichiometry. Test... and Train... datasets contain trajectories, and
    Equilibrium... contain optimized geometries. Originally published in *A continuous-
    filter convolutional neural network for modeling quantum interactions*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Iso17EquilibriumSet1",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Iso17EquilibriumSet2(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    MD trajectories using FHI-aims, with a resolution of 1 frame / fs. Dataset has total
    energies and atomic forces. This is a group of datasets consisting on 5 datasets.
    EquilibriumSet1, TrainSet1 and TestSet2 contain the same molecules, all with C7O2H10
    stoichiometry. TestSet2 and EquilibriumSet2 contain different molecules with the
    same stoichiometry. Test... and Train... datasets contain trajectories, and
    Equilibrium... contain optimized geometries. Originally published in *A continuous-
    filter convolutional neural network for modeling quantum interactions*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Iso17EquilibriumSet2",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Iso17TestSet1(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    MD trajectories using FHI-aims, with a resolution of 1 frame / fs. Dataset has total
    energies and atomic forces. This is a group of datasets consisting on 5 datasets.
    EquilibriumSet1, TrainSet1 and TestSet2 contain the same molecules, all with C7O2H10
    stoichiometry. TestSet2 and EquilibriumSet2 contain different molecules with the
    same stoichiometry. Test... and Train... datasets contain trajectories, and
    Equilibrium... contain optimized geometries. Originally published in *A continuous-
    filter convolutional neural network for modeling quantum interactions*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Iso17TestSet1",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Iso17TestSet2(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    MD trajectories using FHI-aims, with a resolution of 1 frame / fs. Dataset has total
    energies and atomic forces. This is a group of datasets consisting on 5 datasets.
    EquilibriumSet1, TrainSet1 and TestSet2 contain the same molecules, all with C7O2H10
    stoichiometry. TestSet2 and EquilibriumSet2 contain different molecules with the
    same stoichiometry. Test... and Train... datasets contain trajectories, and
    Equilibrium... contain optimized geometries. Originally published in *A continuous-
    filter convolutional neural network for modeling quantum interactions*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Iso17TestSet2",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Iso17TrainSet1(
    lot: str = "pbe_ts-fhi_aims_numerical",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    MD trajectories using FHI-aims, with a resolution of 1 frame / fs. Dataset has total
    energies and atomic forces. This is a group of datasets consisting on 5 datasets.
    EquilibriumSet1, TrainSet1 and TestSet2 contain the same molecules, all with C7O2H10
    stoichiometry. TestSet2 and EquilibriumSet2 contain different molecules with the
    same stoichiometry. Test... and Train... datasets contain trajectories, and
    Equilibrium... contain optimized geometries. Originally published in *A continuous-
    filter convolutional neural network for modeling quantum interactions*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Iso17TrainSet1",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SN2(
    lot: str = "dsd_blyp_d3bj-def2tzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Used to test accuracy in SN2 type reactions with charges CH3X + X'-- -> CH3X' + X-
    Note that this dataset has charged species, and contains all possible structures
    that can be formed in fragmentation reactions: H3X, HX, CHX or CH2X- as well as
    geometries for H2, CH2, CH3+ and XY All possible combinations are included. It is
    unclear what the reference point for the dipoles in the dataset are, the units are
    eA, the reference is most likely the center-of-charge. Originally published in
    *PhysNet: A Neural Network for Predicting Energies, Forces, Dipole Moments, and
    Partial Charges*. DOI: '10.1021/acs.jctc.9b00181'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SN2",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def ANICCScan(
    lot: str = "uwb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Dataset includes relaxed scans of stretching carbon-carbon single bonds for a number
    of compounds. UwB97x means UKS was used. Originally published in *TODO*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="ANICCScan",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def DielsAlder(
    lot: str = "uwb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Includes structures sampled in different ways from a diels alder reaction. Among
    them, from the intrinsic reaction coordinate (IRC), and from specific points of the
    potential energy surface (PES), in some cases using active learning, with the QBC
    criteria, and with normal mode sampling. UwB97x means UKS was used
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="DielsAlder",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def ANI1e(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Structures corresponding to all smiles extracted from the ANI-1x dataset, embedded
    in 3D space and optimized with PM7. This dataset does not have forces, but it has
    other physical properties: Rotational constants A, B, C (GHz); dipole and
    polarizability magnitudes (Debye and a_0^3 respectively); energy of HOMO and LUMO,
    and HOMO-LUMO gap (Ha); average <r^2> (spatial extent, a_0^2); zero point
    vibrational energies (ZPVE, Ha); zero Kelvin internal energy (Ha); thermal
    quantities, U, H, G, C_v, at 298.15 K (C_v in cal/K/mol, rest in Ha). Originally
    published in *ANI-1E: An equilibrium database from the ANI-1 database*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="ANI1e",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SPICEDes370K(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: currently has serious issues, do not use. This dataset group is split into
    7 datasets, some of which have overlapping structures. For more information consult
    the relevant paper. Note that some molecules in these datasets contain ions or
    counterions, but there are no structures with net charge. Also: Some of the fields
    in these sets are missing for some conformations, namely, the MBIS fields and bond-
    indices are missing for IonPairs and Des370K, and the bond-indices fields only are
    missing for the PubChem data (except the subset ``6``). Originally published in
    *SPICE, A Dataset of Drug-like Molecules and Peptides for Training Machine Learning
    Potentials*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SPICEDes370K",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SPICEDesMonomers(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: currently has serious issues, do not use. This dataset group is split into
    7 datasets, some of which have overlapping structures. For more information consult
    the relevant paper. Note that some molecules in these datasets contain ions or
    counterions, but there are no structures with net charge. Also: Some of the fields
    in these sets are missing for some conformations, namely, the MBIS fields and bond-
    indices are missing for IonPairs and Des370K, and the bond-indices fields only are
    missing for the PubChem data (except the subset ``6``). Originally published in
    *SPICE, A Dataset of Drug-like Molecules and Peptides for Training Machine Learning
    Potentials*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SPICEDesMonomers",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SPICEDipeptides(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: currently has serious issues, do not use. This dataset group is split into
    7 datasets, some of which have overlapping structures. For more information consult
    the relevant paper. Note that some molecules in these datasets contain ions or
    counterions, but there are no structures with net charge. Also: Some of the fields
    in these sets are missing for some conformations, namely, the MBIS fields and bond-
    indices are missing for IonPairs and Des370K, and the bond-indices fields only are
    missing for the PubChem data (except the subset ``6``). Originally published in
    *SPICE, A Dataset of Drug-like Molecules and Peptides for Training Machine Learning
    Potentials*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SPICEDipeptides",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SPICEIonPairs(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: currently has serious issues, do not use. This dataset group is split into
    7 datasets, some of which have overlapping structures. For more information consult
    the relevant paper. Note that some molecules in these datasets contain ions or
    counterions, but there are no structures with net charge. Also: Some of the fields
    in these sets are missing for some conformations, namely, the MBIS fields and bond-
    indices are missing for IonPairs and Des370K, and the bond-indices fields only are
    missing for the PubChem data (except the subset ``6``). Originally published in
    *SPICE, A Dataset of Drug-like Molecules and Peptides for Training Machine Learning
    Potentials*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SPICEIonPairs",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SPICEPubChem2xCompatible(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: currently has serious issues, do not use. This dataset group is split into
    7 datasets, some of which have overlapping structures. For more information consult
    the relevant paper. Note that some molecules in these datasets contain ions or
    counterions, but there are no structures with net charge. Also: Some of the fields
    in these sets are missing for some conformations, namely, the MBIS fields and bond-
    indices are missing for IonPairs and Des370K, and the bond-indices fields only are
    missing for the PubChem data (except the subset ``6``). Originally published in
    *SPICE, A Dataset of Drug-like Molecules and Peptides for Training Machine Learning
    Potentials*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SPICEPubChem2xCompatible",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SPICEPubChem(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: currently has serious issues, do not use. This dataset group is split into
    7 datasets, some of which have overlapping structures. For more information consult
    the relevant paper. Note that some molecules in these datasets contain ions or
    counterions, but there are no structures with net charge. Also: Some of the fields
    in these sets are missing for some conformations, namely, the MBIS fields and bond-
    indices are missing for IonPairs and Des370K, and the bond-indices fields only are
    missing for the PubChem data (except the subset ``6``). Originally published in
    *SPICE, A Dataset of Drug-like Molecules and Peptides for Training Machine Learning
    Potentials*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SPICEPubChem",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SPICESolvatedAminoacids(
    lot: str = "wb97m_d3bj-def2tzvppd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    WARNING: currently has serious issues, do not use. This dataset group is split into
    7 datasets, some of which have overlapping structures. For more information consult
    the relevant paper. Note that some molecules in these datasets contain ions or
    counterions, but there are no structures with net charge. Also: Some of the fields
    in these sets are missing for some conformations, namely, the MBIS fields and bond-
    indices are missing for IonPairs and Des370K, and the bond-indices fields only are
    missing for the PubChem data (except the subset ``6``). Originally published in
    *SPICE, A Dataset of Drug-like Molecules and Peptides for Training Machine Learning
    Potentials*. DOI: 'TODO'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SPICESolvatedAminoacids",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def SolvatedProteinFragments(
    lot: str = "revpbe_d3bj-def2tzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Probes many-body intermolecular interactions between protein fragments and water
    molecules, which are important for the description of many biologically relevant
    condensed phase systems. It contains structures for all possible 'amons' (hydrogen-
    saturated covalently bonded fragments) of up to eight heavy atoms (C, N, O, S) that
    can be derived from chemical graphs of proteins containing the 20 natural amino
    acids connected via peptide bonds or disulfide bridges. Originally published in
    *PhysNet: A Neural Network for Predicting Energies, Forces, Dipole Moments, and
    Partial Charges*. DOI: '10.1021/acs.jctc.9b00181'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="SolvatedProteinFragments",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Train3BPAMixedT(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Group of datasets consisting on 8 different datasts. Two meant for training and 6
    for testing / validation. For more information consult the corresponding article.
    Originally published in *TODO*. DOI: 'https://doi.org/10.1021/acs.jctc.1c00647'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Train3BPAMixedT",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Train3BPA300K(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Group of datasets consisting on 8 different datasts. Two meant for training and 6
    for testing / validation. For more information consult the corresponding article.
    Originally published in *TODO*. DOI: 'https://doi.org/10.1021/acs.jctc.1c00647'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Train3BPA300K",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Test3BPA300K(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Group of datasets consisting on 8 different datasts. Two meant for training and 6
    for testing / validation. For more information consult the corresponding article.
    Originally published in *TODO*. DOI: 'https://doi.org/10.1021/acs.jctc.1c00647'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Test3BPA300K",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Test3BPA600K(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Group of datasets consisting on 8 different datasts. Two meant for training and 6
    for testing / validation. For more information consult the corresponding article.
    Originally published in *TODO*. DOI: 'https://doi.org/10.1021/acs.jctc.1c00647'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Test3BPA600K",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Test3BPA1200K(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Group of datasets consisting on 8 different datasts. Two meant for training and 6
    for testing / validation. For more information consult the corresponding article.
    Originally published in *TODO*. DOI: 'https://doi.org/10.1021/acs.jctc.1c00647'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Test3BPA1200K",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Test3BPADihedral180(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Group of datasets consisting on 8 different datasts. Two meant for training and 6
    for testing / validation. For more information consult the corresponding article.
    Originally published in *TODO*. DOI: 'https://doi.org/10.1021/acs.jctc.1c00647'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Test3BPADihedral180",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Test3BPADihedral150(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Group of datasets consisting on 8 different datasts. Two meant for training and 6
    for testing / validation. For more information consult the corresponding article.
    Originally published in *TODO*. DOI: 'https://doi.org/10.1021/acs.jctc.1c00647'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Test3BPADihedral150",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def Test3BPADihedral120(
    lot: str = "wb97x-631gd",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Group of datasets consisting on 8 different datasts. Two meant for training and 6
    for testing / validation. For more information consult the corresponding article.
    Originally published in *TODO*. DOI: 'https://doi.org/10.1021/acs.jctc.1c00647'
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="Test3BPADihedral120",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


def ANIExCorr(
    lot: str = "pbe-dzvp",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
    Has ``coefficients`` which correspond to atomic coefficients for the fitting
    density, and ``energies-xc``, the exchange-correlation energies
    """
    return _fetch_and_create_builtin_dataset(
        root=datasets_dir(),
        ds_name="ANIExCorr",
        lot=lot,
        verbose=verbose,
        download=download,
        dummy_properties=dummy_properties,
        skip_check=skip_check,
        suffix=".h5",
    )


class _DatasetId(Enum):
    TESTDATA = "TestData"
    TESTDATAIONS = "TestDataIons"
    TESTDATAFORCESDIPOLES = "TestDataForcesDipoles"
    IONSVERYHEAVY = "IonsVeryHeavy"
    IONSHEAVY = "IonsHeavy"
    IONSLIGHT = "IonsLight"
    ANI1Q = "ANI1q"
    ANI2QHEAVY = "ANI2qHeavy"
    ANI1CCX = "ANI1ccx"
    AMINOACIDDIMERS = "AminoacidDimers"
    ANI1X = "ANI1x"
    ANI2X = "ANI2x"
    COMP6V1 = "COMP6v1"
    COMP6V2 = "COMP6v2"
    QM9C7O2H10 = "QM9C7O2H10"
    QM9 = "QM9"
    ISO17EQUILIBRIUMSET1 = "Iso17EquilibriumSet1"
    ISO17EQUILIBRIUMSET2 = "Iso17EquilibriumSet2"
    ISO17TESTSET1 = "Iso17TestSet1"
    ISO17TESTSET2 = "Iso17TestSet2"
    ISO17TRAINSET1 = "Iso17TrainSet1"
    SN2 = "SN2"
    ANICCSCAN = "ANICCScan"
    DIELSALDER = "DielsAlder"
    ANI1E = "ANI1e"
    SPICEDES370K = "SPICEDes370K"
    SPICEDESMONOMERS = "SPICEDesMonomers"
    SPICEDIPEPTIDES = "SPICEDipeptides"
    SPICEIONPAIRS = "SPICEIonPairs"
    SPICEPUBCHEM2XCOMPATIBLE = "SPICEPubChem2xCompatible"
    SPICEPUBCHEM = "SPICEPubChem"
    SPICESOLVATEDAMINOACIDS = "SPICESolvatedAminoacids"
    SOLVATEDPROTEINFRAGMENTS = "SolvatedProteinFragments"
    TRAIN3BPAMIXEDT = "Train3BPAMixedT"
    TRAIN3BPA300K = "Train3BPA300K"
    TEST3BPA300K = "Test3BPA300K"
    TEST3BPA600K = "Test3BPA600K"
    TEST3BPA1200K = "Test3BPA1200K"
    TEST3BPADIHEDRAL180 = "Test3BPADihedral180"
    TEST3BPADIHEDRAL150 = "Test3BPADihedral150"
    TEST3BPADIHEDRAL120 = "Test3BPADihedral120"
    ANIEXCORR = "ANIExCorr"


class _LotId(Enum):
    DEFAULT = "default"
    ALL = "all"
    B3LYP_631G_2DF_P = "b3lyp-631g_2df_p"
    B973C_DEF2MTZVP = "b973c-def2mtzvp"
    CCSD_PTP_STAR_CBS = "ccsd(t)star-cbs"
    DSD_BLYP_D3BJ_DEF2TZVP = "dsd_blyp_d3bj-def2tzvp"
    G4MP2_631G_2DF_P = "g4mp2-631g_2df_p"
    PBE_DZVP = "pbe-dzvp"
    PBE_TS_FHI_AIMS_NUMERICAL = "pbe_ts-fhi_aims_numerical"
    REVPBE_D3BJ_DEF2TZVP = "revpbe_d3bj-def2tzvp"
    UWB97X_631GD = "uwb97x-631gd"
    WB97M_D3BJ_DEF2TZVPPD = "wb97m_d3bj-def2tzvppd"
    WB97MD3BJ_DEF2TZVPP = "wb97md3bj-def2tzvpp"
    WB97MV_DEF2TZVPP = "wb97mv-def2tzvpp"
    WB97X_631GD = "wb97x-631gd"
    WB97X_DEF2TZVPP = "wb97x-def2tzvpp"
