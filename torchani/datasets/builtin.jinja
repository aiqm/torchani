# This file is automatically generated by tools/builtin-datasets-codegen.py,
# which uses the jinja template engine, *DO NOT MODIFY THIS FILE* unless you
# know what you are doing.
r"""
TorchANI Built-in Datasets

Datasets provided by the TorchANI library, in a format ready to batch and train
on. All datasets importable from this module are also directly importable from
`torchani.datasets`. For all datasets, the corresponding docstrings provide
references and associated DOI when possible that point to the original
publications. Please cite the original publications if you use any of these
datasets.

Note that the conformations present in datasets with different LoT *may be
different*. In many cases the number of conformations is similar, and many of
the conformations match, but due to filters applied to the data, and to
different convergence characteristics of the different LoT used, some
calculations may not properly converge, or may be too costly for some LoT and
thus are not included.
"""
import typing as tp
import json
from enum import Enum
from pathlib import Path

from torchani.datasets.utils import _builder
from torchani.datasets.anidataset import ANIDataset

_DATASETS_JSON_PATH = Path(__file__).parent / "builtin_datasets.json"

with open(_DATASETS_JSON_PATH, mode="rt", encoding="utf-8") as f:
    _DATASETS_SPEC = json.load(f)

# Convert csv file with format "file_name, MD5-hash" into a dictionary
_MD5S: tp.Dict[str, str] = dict()
with open(Path(__file__).resolve().parent / "md5s.csv") as f:
    lines = f.readlines()
    for line in lines[1:]:
        file_, md5 = line.split(",")
        _MD5S[file_.strip()] = md5.strip()


{% for ds in datasets %}
def {{ ds.name }}(
    lot: str = "{{ ds.default_lot }}",
    verbose: bool = True,
    download: bool = True,
    dummy_properties: tp.Optional[tp.Dict[str, tp.Any]] = None,
    skip_check: bool = False,
) -> ANIDataset:
    r"""
{{ ds.docstr }}
    """
    lot = lot.lower()
    lots = _DATASETS_SPEC["{{ ds.name }}"]["lot"]
    if lot not in lots:
        raise ValueError(f"Wrong LoT, supported are: {set(lots) - {'default-lot'}}")

    return _builder(
        archive=lots[lot]["archive"],
        files_and_md5s={k: _MD5S[k] for k in lots[lot]["files"]},
        dummy_properties=dummy_properties,
        download=download,
        verbose=verbose,
        skip_check=skip_check,
        name="{{ ds.name }}",
        suffix=".h5"
    )


{% endfor %}
class DatasetId(Enum):
{% for ds in datasets %}
    {{ ds.name | upper }} = "{{ ds.name }}"
{% endfor %}


class LotId(Enum):
{% for lot in lots %}
    {{ lot | replace("-", "_") | replace("(", "_p") | replace(")", "p_") | upper }} = "{{ lot }}"
{% endfor %}

